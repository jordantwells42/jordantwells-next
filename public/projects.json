[
    {
        "title":"minimage",
        "subtitle":"Generates abstract art using a genetic algorithm",
        "desc":"I wanted to create a way to generate minimalist, abstract art that you could see the progression of. Using Python, I created a genetic algorithm which takes an input image, and attempt to 'evolve' a copy of it using simple polygons. This is achieved by creating a population of images with random polygons with random colors, selecting the images with the best 'fitness' that most closely resemble the input image, and crossbreeding and mutating the resulting selected images for several generations.",
        "images":["/pearl.webp" , "/turtle.webp"],
        "link":"",
        "link_type": "Demo",
        "github_link":"https://github.com/jordantwells42/minimage",
        "skills":["Genetic Algorithms", "Python", "Image Processing"]
    },
    {
        "title":"NoteTab",
        "subtitle":"A new tab chrome extension that lets you take notes",
        "desc":"I wanted to create a place to easily jot down notes in a place that I will always seem them and be reminded of them. NoteTab overhauls the Chrome New Tab with my own custom page developed with HTML, CSS, and JS. This page has the ability to add sticky notes where you can take notes that are stored across browser sessions. You can also choose a selection of background images that are randomly chosen for each session.",
        "images":["/NT1.webp","/NT2.webp","/NT3.webp"],
        "link":"https://chrome.google.com/webstore/detail/notetab/pbpbbpkaaakjiiafopoofnfohkhggajl",
        "link_type": "Extension Page Link",
        "github_link":"https://github.com/jordantwells42/NoteTab",
        "skills":["Chrome Extension Dev", "JavaScript", "Event Loops"]
    },
    {
        "title":"Protein Viewer",
        "subtitle":"An annotated protein crystal structure viewer",
        "desc":"I wanted to create a protein viewer to aid in my research work in the Ellington and Alper labs, and to help out the graduate students that I work with. Typically, generating visualizations of this type using PyMOL can take several minutes and needs to be done hundreds of times to generate designs, so this viewer expedites that process. Built using React and ngl molecular viewer, you can view any protein from the RCSB, explore different residues, and look at interactions between residues. ",
        "images":["/PV1.webp", "/PV2.webp", "/PV3.webp"],
        "link":"https://protein-viewer-jtw.vercel.app/",
        "link_type": "Demo Link",
        "github_link":"https://github.com/jordantwells42/protein-viewer",
        "skills":["React", "JavaScript", "ngl/Three.js"]
    },
    {
        "title":"This Site",
        "subtitle":"My personal portfolio website",
        "desc":"A website to host all of my projects and information. Made with Next.js and deployed on Vercel. I would describe it more but you can just check out parts of it right now! ",
        "images":["/JW3.webp", "/JW2.webp", "/JW1.webp"],
        "link":"https://medium.com/@jordantwells/how-i-created-a-responsive-personal-portfolio-website-with-next-js-c516cd61e4ec?sk=cf2c3950de9dd3e47970322262c18f2a",
        "link_type": "Medium Blog Post",
        "github_link":"https://github.com/jordantwells42/jordantwells-next",
        "skills":["Next.js", "Web Dev", "JavaScript"]
    },
    {
        "title":"Ray Marching",
        "subtitle":"A GLSL shader experiment",
        "desc":"Inspired by the incredible work of Inigo Quilez, I wanted to learn how to use shaders. I created this simple demo to practice signed-distance functions, ray marching, pixelation, and interactivity within a GLSL fragment shader.",
        "images":["/RM1.webp", "/RM2.webp", "/RM1.webp"],
        "link":"https://ray-marching-jtw.vercel.app/",
        "link_type": "Demo Page",
        "github_link":"https://github.com/jordantwells42/ray-marching",
        "skills":["OpenGL Shaders", "GLSL", "Three.js"]
    }
]